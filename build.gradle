apply plugin: 'base'

buildscript {
    ext {
        lightVersion = '0.0.1-SNAPSHOT'
        javaVersion = 1.6
        slf4jVersion = '1.7.16'
        log4jVersion = '2.1'
        jodaTimeVersion = '2.6'
        mockitoVersion = '1.10.19'
        hamcrestVersion = '1.3'
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
//        classpath "net.saliman:gradle-cobertura-plugin:2.3.0"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: "com.github.kt3k.coveralls"

    group = 'com.geeksaga.light'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

version = lightVersion

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
//    apply plugin: "net.saliman.cobertura"

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }

    /*
    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageIgnores = ['org.slf4j.Logger.*']
    }
    */

    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        // complie "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        // complie "org.slf4j:slf4j-log4j12:$slf4jVersion"
        // compile "org.apache.logging.log4j:log4j-api:$log4jVersion"
        // compile "org.apache.logging.log4j:log4j-core:$log4jVersion"
        // compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
        // compile "joda-time:joda-time:$jodaTimeVersion"

        testCompile "junit:junit:4.+"
        testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
        testCompile "org.mockito:mockito-all:$mockitoVersion"
    }

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    version = lightVersion

    jar {
        manifest.attributes provider: 'geeksaga'
    }

    /*
    test {
        filter {
            includeTestsMatching "*Test"
        }
    }

    test.finalizedBy(project.tasks.cobertura)
    */

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    task copyToLibrary(type: Copy) {
        into "${rootProject.rootDir}/build/libs"
        from configurations.testRuntime
    }

    jar.finalizedBy(project.tasks.copyToLibrary)
    // test.finalizedBy(project.tasks.jacocoTestReport)
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output.classesDir)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        xml.destination ="${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

    setOnlyIf { true }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}